設計仕様
========

設計仕様では以下を定義する

- :ref:`zos-int-cls`
- :ref:`zos-int-seq`
- :ref:`zos-int-sch`

.. _zos-int-cls:

モジュール構成
--------------

*クラス図*

.. uml:: umls/class.uml

- Rate

  - レートを表すクラス

- CandleStick

  - ローソク足を表すクラス

- MovingAverage

  - 移動平均を表すクラス

.. _zos-int-seq:

シーケンス
----------

- :ref:`zos-int-seq-import-rates`
- :ref:`zos-int-seq-import-candle-sticks`
- :ref:`zos-int-seq-import-moving-averages`

.. _zos-int-seq-import-rates:

レートを収集する
^^^^^^^^^^^^^^^^

*シーケンス図*

.. uml:: umls/seq-import-rates.uml

指定された収集開始日と収集終了日から計算した収集月ごとに1を繰り返す

1. バックアップディレクトリから対象月の圧縮ファイルを取得して解凍する

指定された収集開始日と収集終了日から計算した収集日ごとに以下を繰り返す

2. 外部ツール，または解凍したバックアップファイルから対象日のファイルを取得する

   - ファイルにはリアルタイムで日付・ペアごとにレートが出力されている
   - 1行に1レートが日時の順番で記載されている

取得したファイル数分，3, 4を繰り返す

3. ファイルに記載されているレート情報を成形して一時ファイルに書き込む
4. 書き込んだ一時ファイルをDBにインポートする
5. DBから日時を指定してレートを取得する

レートが存在していて，かつ取得したファイルがバックアップファイルでなければ6を実行する

6. DBに登録したレートをファイルに出力する

   - 1日分の全てのペアのレートを日時の順番で1ファイルに出力する

.. _zos-int-seq-import-candle-sticks:

ローソク足を収集する
^^^^^^^^^^^^^^^^^^^^

*シーケンス図*

.. uml:: umls/seq-import-candle-sticks.uml

指定された収集開始日と収集終了日から計算した収集月ごとに1を繰り返す

1. バックアップディレクトリから対象月の圧縮ファイルを取得して解凍する

指定された収集開始日と収集終了日から計算した収集日ごとに以下を繰り返す

2. 外部ツール，または解凍したバックアップファイルから対象日のファイルを取得する

   - ファイルにはローソク足情報として1分ごとに以下の情報が出力されている

     - 開始日時
     - 終了日時
     - 通貨ペア
     - 時間枠
     - 始値
     - 終値
     - 高値
     - 安値

   - 1行に1本のローソク足情報が終了日時，時間枠の順番で記載されている
   - ファイルは通貨ペアごとに出力されている

取得したファイル数分，3, 4を繰り返す

3. ファイルに記載されているローソク足情報を成形して一時ファイルに書き込む
4. 書き込んだ一時ファイルをDBにインポートする
5. DBから日時を指定してローソク足を取得する

ローソク足が存在していて，かつ取得したファイルがバックアップファイルでなければ6を実行する

6. DBに登録したローソク足をファイルに出力する

   - 1日分の全てのペアのローソク足を日時の順番で1ファイルに出力する

.. _zos-int-seq-import-moving-averages:

移動平均を収集する
^^^^^^^^^^^^^^^^^^

*シーケンス図*

.. uml:: umls/seq-import-moving-averages.uml

指定された収集開始日と収集終了日から計算した収集月ごとに1を繰り返す

1. バックアップディレクトリから対象月の圧縮ファイルを取得して解凍する

指定された収集開始日と収集終了日から計算した収集日ごとに以下を繰り返す

2. 外部ツール，または解凍したバックアップファイルから対象日のファイルを取得する

   - ファイルには移動平均情報として1分ごとに以下の情報が出力されている

     - 日時
     - 通貨ペア
     - 時間枠
     - 区間
     - 移動平均値

   - 1行に1本の移動平均情報が日時，時間枠の順番で記載されている
   - ファイルは通貨ペアごとに出力されている

取得したファイル数分，3, 4を繰り返す

3. ファイルに記載されている移動平均情報を成形して一時ファイルに書き込む
4. 書き込んだ一時ファイルをDBにインポートする
5. DBから日時を指定して移動平均を取得する

移動平均が存在していて，かつ取得したファイルがバックアップファイルでなければ6を実行する

6. DBに登録した移動平均をファイルに出力する

   - 1日分の全ての通貨ペアの移動平均を日時の順番で1ファイルに出力する

.. _zos-int-sch:

スキーマ定義
------------

- :ref:`zos-int-sch-rates`
- :ref:`zos-int-sch-candle-sticks`
- :ref:`zos-int-sch-moving-averages`

.. _zos-int-sch-rates:

ratesテーブル
^^^^^^^^^^^^^

レートを登録するratesテーブルを定義する

.. csv-table::
   :header: "カラム", "型", "内容", "PRIMARY KEY", "NOT NULL"
   :widths: 10, 10, 20, 20, 10

   "id", "INTEGER", "レートのID", "○", "○"
   "time", "DATETIME", "レートが変化した日時",,"○"
   "pair", "STRING", "レートのペア",,"○"
   "bid", "FLOAT", "売値",,"○"
   "ask", "FLOAT", "買値",,"○"
   "created_at", "DATETIME", "作成日時",,"○"
   "updated_at", "DATETIME", "更新日時",,"○"

.. _zos-int-sch-candle-sticks:

candle_sticksテーブル
^^^^^^^^^^^^^^^^^^^^^

ローソク足を登録するcandle_sticksテーブルを定義する

.. csv-table::
   :header: "カラム", "型", "内容", "PRIMARY KEY", "NOT NULL"
   :widths: 10, 10, 20, 20, 10

   "id", "INTEGER", "ローソク足のID", "○", "○"
   "from", "DATETIME", "ローソク足の開始日時",, "○"
   "to", "DATETIME", "ローソク足の終了日時",, "○"
   "pair", "STRING", "レートのペア",, "○"
   "time_frame", "STRING", "時間枠を示すID",, "○"
   "open", "FLOAT", "始値",, "○"
   "close", "FLOAT", "終値",, "○"
   "high", "FLOAT", "高値",, "○"
   "low", "FLOAT", "安値",, "○"
   "created_at", "DATETIME", "作成日時",,"○"
   "updated_at", "DATETIME", "更新日時",,"○"

.. _zos-int-sch-moving-averages:

moving_averagesテーブル
^^^^^^^^^^^^^^^^^^^^^^^

移動平均を登録するmoving_averagesテーブルを定義する

.. csv-table::
   :header: "カラム", "型", "内容", "PRIMARY KEY", "NOT NULL"
   :widths: 10, 10, 20, 20, 10

   "id", "INTEGER", "移動平均のID", "○", "○"
   "time", "DATETIME", "移動平均を算出した日時",, "○"
   "pair", "STRING", "通貨ペア",, "○"
   "time_frame", "STRING", "時間枠を示すID",, "○"
   "period", "INTEGER", "移動平均値の算出に使用した期間",, "○"
   "value", "FLOAT", "移動平均値",, "○"
   "created_at", "DATETIME", "作成日時",,"○"
   "updated_at", "DATETIME", "更新日時",,"○"
